import pandas as pd
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import make_column_selector as selector
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import silhouette_score, make_scorer
from sklearn.model_selection import KFold
import streamlit as st
import duckdb
import numpy as np
import plotly.express as px
from pymongo import MongoClient
from plotly.subplots import make_subplots
import plotly.graph_objects as go
from google import genai

gemini_client = genai.Client(api_key=st.secrets["YOUR_API_KEY"])


@st.cache_data
def load_data():
    df = pd.read_excel("Raw_Data.xlsx")
    nosql = df.to_dict(orient="records")
    return df, nosql
df, nosql = load_data()


# Connect MongoDB
client = MongoClient(st.secrets["MONGO_URI"])
db = client["mydatabase"]
collection = db["mycollection"]
if "nosql_update" not in st.session_state:
    collection.delete_many({})
    if nosql:
        collection.insert_many(nosql)
    st.session_state["nosql_update"] = True

st.title("DADS5001_Project : EV car Parking analysis :car:")
st.markdown("**üìåüìå ‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå : ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏≠‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏∏‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏î‡πÅ‡∏ä‡πà / ‡∏à‡∏≠‡∏î‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô " \
"‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ML ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô üèÜüèÖ**")
st.header("EV car parking report :")
st.markdown("*üìì ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏≠‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏∏‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á ‡πÜ*")
st.dataframe(df, hide_index=True)

# Transform dataframe
st.header("Features Selection + Add new Features : ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
st.markdown("*‚úñÔ∏è Features ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, E-mail, ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô*")
st.markdown("*‚úîÔ∏è Features ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∑‡∏≠ ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ï‡πà‡∏≠ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡∏≠‡∏á transection ‡∏ô‡∏±‡πâ‡∏ô‡πÜ (Energyrate) ," \
"‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à‡∏ô‡∏±‡πâ‡∏ô‡πÜ ‡∏ï‡πà‡∏≠ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (min-max kWh), ‡∏Ñ‡πà‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Energyrate ‡∏Å‡∏±‡∏ö min_kWh " \
"‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Model ‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ*")

df["UsingTime"] = pd.to_timedelta(df["Using Time (HH:MM:SS)"]).dt.total_seconds()
df["Time (Unit Hour)"] = df["UsingTime"] / 3600
df["Energyrate"] = df["Charging Amount (kWh)"] / df["Time (Unit Hour)"]
min_condition = [
    df["Charging Speed (kW)"] <= 22,
    df["Charging Speed (kW)"] <=50,
    df["Charging Speed (kW)"] > 50,
]
min_chioce = [
    3.5,#*df["Time (Unit Hour)"],
    df["Charging Speed (kW)"],#*df["Time (Unit Hour)"],
    df["Charging Speed (kW)"]#*df["Time (Unit Hour)"] /2
]
df["Minimium_output"] = np.select(min_condition,min_chioce)


max_condition = [
    df["Charging Speed (kW)"] == 7,
    df["Charging Speed (kW)"] == 22,
    df["Charging Speed (kW)"] <=50,
    df["Charging Speed (kW)"] > 50,
]
max_chioce = [
    df["Charging Speed (kW)"],#*df["Time (Unit Hour)"],
    11,#*df["Time (Unit Hour)"],
    df["Charging Speed (kW)"],#*df["Time (Unit Hour)"],
    df["Charging Speed (kW)"]#*df["Time (Unit Hour)"] /2
]
df["Maximium_output"] = np.select(max_condition,max_chioce)
df["diff"] = df["Energyrate"] - df["Minimium_output"]
AC_data = df[(df["Charger Type"]=="AC")]

# Prepairation Training Dataset

data = AC_data[[
    "Time (Unit Hour)",
    "Charger Type",
    "Charging Speed (kW)",
    "Charging Amount (kWh)",
    "Energyrate",
    "Minimium_output",
    "Maximium_output",
    "diff",
]]
st.dataframe(data)

# Scatter plot to Check outlier
st.header("Scatter plot : ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏±‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö")
st.markdown("*üí¨ ‡∏à‡∏∞‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏∏‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ outlier ‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ä‡∏≤‡∏£‡πå‡∏à‡∏£‡∏ñ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏Ø ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏Ø)*")
if "fig1_state" not in st.session_state:
    fig1 = px.scatter(
        data_frame= data,
        x="Time (Unit Hour)",
        y ='Charging Amount (kWh)',
        title="Duration vs kWh"
        )
    st.session_state["fig1_state"] = fig1

st.plotly_chart(st.session_state["fig1_state"])



# Remove outlier
AC_filter = data[(data["Time (Unit Hour)"]<=10)]

# Scatter plot after remove outlier
st.header("Scatter plot : ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏±‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ‡∏´‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• outlier ‡∏≠‡∏≠‡∏Å (>10 hr)")
st.markdown("*üí¨ ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ì‡∏Å‡∏≤‡∏£ Clustering ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡∏°‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô*")
if "fig2_state" not in st.session_state:
    fig2 = px.scatter(
        data_frame= AC_filter,
        x="Time (Unit Hour)",
        y ='Charging Amount (kWh)',
        title="Duration vs kWh"
        )
    st.session_state["fig2_state"] = fig2
st.plotly_chart(st.session_state["fig2_state"])

# ML model (Onehot > PCA > K-Mean)
@st.cache_resource
def ML(AC_filter = AC_filter, AC_data = AC_data):
    numeric_features = selector(dtype_include=['int64', 'float64'])(AC_filter)
    categorical_features = selector(dtype_include=['object'])(AC_filter)


    preprocessor = ColumnTransformer(
        transformers=[        
            ('num', StandardScaler(), numeric_features),
            ('cat', OneHotEncoder(), categorical_features)
        ]
    )

    pipe = Pipeline([
        ('preprocess', preprocessor),
        ('pca', PCA()),
        ('kmeans', KMeans(random_state=42))
    ])

    def silhouette_scorer(estimator, X):
        X_transformed = estimator.named_steps['preprocess'].transform(X)
        X_transformed = estimator.named_steps['pca'].transform(X_transformed)
        labels = estimator.named_steps['kmeans'].fit_predict(X_transformed)
        return silhouette_score(X_transformed, labels)
    param_grid = {
        'pca__n_components': [1, 2, 3],
        'kmeans__n_clusters': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    }

    cv = KFold(n_splits=5, shuffle=True, random_state=42)
    grid = GridSearchCV(
        pipe,
        param_grid,
        scoring=silhouette_scorer,
        cv=cv,
        verbose=1
    )
    grid.fit(AC_filter)
    # Apply model with best parameter to alldata
    X_out_transformed = grid.best_estimator_.named_steps['preprocess'].transform(AC_data)
    X_out_pca = grid.best_estimator_.named_steps['pca'].transform(X_out_transformed)
    AC_data['cluster'] = grid.best_estimator_.named_steps['kmeans'].predict(X_out_pca).astype(str)
    return (AC_data)

AC_data = ML()
st.header("Dataframe : ‡∏´‡∏•‡∏±‡∏á Clustering üíª")
st.markdown("*üí¨ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ PCA ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö K-mean ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏≤‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÇ‡∏î‡∏¢ Model ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Best parameter ‡∏ú‡πà‡∏≤‡∏ô GridSearchCV ‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤ :*")
st.markdown("*PCA = 1 ‡πÅ‡∏Å‡∏ô ‡πÅ‡∏•‡∏∞ K-mean ‡πÑ‡∏î‡πâ 2 ‡∏Å‡∏•‡∏∏‡πà‡∏°*")
st.dataframe(AC_data, hide_index=True)


nosql_AC_data= AC_data.to_dict(orient="records")
collect_result = db["result"]
if "nosql_AC_data" not in st.session_state:
    collect_result.delete_many({})
    if nosql_AC_data:
        collect_result.insert_many(nosql_AC_data)
    st.session_state["nosql_AC_data"] = True


# Scatter plot to see detail
st.header("Scatter plot : ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏±‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°")
st.markdown("*üí¨ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏ö‡∏ß‡πà‡∏≤ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà 1 ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≤‡∏£‡πå‡∏à‡∏ô‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ï‡πà‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà 0*")
st.markdown("*üí¨ ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà 1 ‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÑ‡∏ü (‡∏à‡∏≠‡∏î‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô)*")
if "fig3_state" not in st.session_state:
    fig3 = px.scatter(
        data_frame= AC_data,
        x="Time (Unit Hour)",
        y ='Charging Amount (kWh)',
        color="cluster",
        color_discrete_sequence=px.colors.qualitative.Plotly,
        hover_data = ["cluster"],
        title="Duration vs kWh"
        )

    fig3.update_layout(
        xaxis=dict(range=[0, 10]),
    )
    st.session_state["fig3_state"] = fig3
st.plotly_chart(st.session_state["fig3_state"])

#Analyst data with SQL 
st.header("Data analysis with SQL (duckdb) : ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏° Cluster") 
result = duckdb.query("""
                      SELECT "cluster", "Charging Speed (kW)", avg("Time (Unit Hour)"), avg("Charging Amount (kWh)")
                      FROM AC_data 
                      GROUP BY "cluster", "Charging Speed (kW)" """).to_df()
result = result.sort_values(by="cluster").reset_index(drop=True)

def SQL_to_Text(result):
    text_sql = []
    for _,row in result.iterrows():
        text = (
            f"‡∏Å‡∏•‡∏∏‡πà‡∏°:{int(row['cluster'])} ,"
            f"‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ä‡∏≤‡∏£‡πå‡∏à:{row['Charging Speed (kW)']}kW ,"
            f"‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:{float(row['avg(\"Time (Unit Hour)\")']):.2f}hour ,"
            f"‡∏û‡∏•‡∏±‡∏á‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:{float(row['avg(\"Charging Amount (kWh)\")']):.2f}kWh"
        )
        text_sql.append(text)
    return "\n".join(text_sql)
text_sql = SQL_to_Text(result)

prompt_sql = f"""‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏â‡∏±‡∏ô‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ä‡∏≤‡∏£‡πå‡∏à‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏´‡∏ô‡πà‡∏≠‡∏¢ 
‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡∏â‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏´‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà ‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏à‡∏∞‡πÅ‡∏≠‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏≠‡∏î‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡∏à‡∏≠‡∏î‡πÅ‡∏ä‡πà/‡∏à‡∏≠‡∏î‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô)
‡πÇ‡∏î‡∏¢‡∏â‡∏±‡∏ô‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ {text_sql}"""



@st.cache_data
def callAPI_SQL(prompt_sql):
    response_sql = gemini_client.models.generate_content(
    model="gemini-2.0-flash", contents=prompt_sql)
    return response_sql

if "AI_SQL" not in st.session_state:
    st.session_state["AI_SQL"] = None

use_ai_SQL = st.checkbox("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏î‡∏¢ Gemini AI",key = "use_ai_SQL")
if use_ai_SQL:
    if st.session_state["AI_SQL"] == None:
        st.session_state["AI_SQL"] = callAPI_SQL(prompt_sql)
    st.write(st.session_state["AI_SQL"].text)
else:
    st.markdown("*üí¨‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡∏¢‡∏ß‡πà‡∏≤ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà 1 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏û‡∏≠‡∏™‡∏°‡∏Ñ‡∏ß‡∏£*")


if "fig4_state" not in st.session_state:  
    fig4 = px.line(result,
                x='Charging Speed (kW)',
                y='avg("Charging Amount (kWh)")',
                hover_data=["cluster"],
                color="cluster",
                color_discrete_sequence=px.colors.qualitative.Plotly)
    st.session_state["fig4_state"] = fig4

st.plotly_chart(st.session_state["fig4_state"])
st.dataframe(result, hide_index=True)


#Analyst data with SQL 

pipe = [
    {
     "$group" : {
         "_id": {"Cluster" : "$cluster",
                 "Group" : "$Group"
                 },
         "count" : {"$sum":1}
        }
    },
    {
        "$project" : {
            "Cluster" : "$_id.Cluster",
            "Group" : "$_id.Group",
            "count" : 1,
            "_id":0
        }
    }
]
nosql_result = pd.DataFrame(list(collect_result.aggregate(pipe)))
nosql_result = nosql_result[["Cluster","Group","count"]]
per_cluster = nosql_result.groupby("Group")["count"].transform("sum")
nosql_result.sort_values(by="Group", inplace=True)

st.header("Data analysis with NoSQL (mongodb) : ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏° Cluster")

groups = nosql_result['Group'].unique()
if "fig5_state" not in st.session_state:
    fig5 = make_subplots(rows=1, 
                        cols=len(groups), 
                        specs=[[{'type': 'domain'}]*len(groups)],
                        subplot_titles=[f"Group: {g}" for g in groups],
                        color_discrete_sequence=px.colors.qualitative.Plotly,
                        sort = FALSE
                        )
####
    for i, group in enumerate(groups):
        df_group = nosql_result[nosql_result['Group'] == group]

        fig5.add_trace(go.Pie(
            labels=df_group['Cluster'],
            values=df_group['count'],
            name=f"Group {group}",
            hoverinfo="label+percent+value"
        ), row=1, col=i+1)
    st.session_state["fig5_state"] = fig5

@st.cache_data
def NoSql_to_Text(nosql_result):
    text_NoSql = []
    for _,row in nosql_result.iterrows():
        text = (
            f"‡∏Å‡∏•‡∏∏‡πà‡∏°:{int(row['Cluster'])} ,"
            f"‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:{row['Group']} ,"
            f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:{int(row["count"])}"
        )
        text_NoSql.append(text)
    return "\n".join(text_NoSql)
        
text_NoSql = NoSql_to_Text(nosql_result)
prompt_NoSql = f"""‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏â‡∏±‡∏ô‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ä‡∏≤‡∏£‡πå‡∏à‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏´‡∏ô‡πà‡∏≠‡∏¢ 
‡πÇ‡∏î‡∏¢‡∏â‡∏±‡∏ô‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡πà‡∏á‡πÅ‡∏¢‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß 2 ‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏Ñ‡∏∑‡∏≠ ‡∏Å‡∏•‡∏∏‡πà‡∏° 0 ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≠‡∏î‡∏ä‡∏≤‡∏£‡πå‡∏à‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞ ‡∏Å‡∏•‡∏∏‡πà‡∏° 1 ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡πÅ‡∏ä‡πà/‡∏à‡∏≠‡∏î‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô 
‡∏â‡∏±‡∏ô‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÇ‡∏î‡∏¢‡∏â‡∏±‡∏ô‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ {text_NoSql}"""
        
@st.cache_data
def callAPI_NoSQL(prompt_NoSql):
    response_NoSql = gemini_client.models.generate_content(
    model="gemini-2.0-flash", contents=prompt_sql)
    return response_NoSql

if "AI_NoSql" not in st.session_state:
    st.session_state["AI_NoSql"] = None

use_ai_Nosql = st.checkbox("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏î‡∏¢ Gemini AI",key="use_ai_Nosql")
if use_ai_Nosql:
    if st.session_state["AI_NoSql"] == None:
        st.session_state["AI_NoSql"] = callAPI_SQL(prompt_NoSql)
    st.write(st.session_state["AI_NoSql"].text)
else:
    st.markdown("*üí¨ ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏° Group ‡∏à‡∏∞‡∏û‡∏ö‡∏ß‡πà‡∏≤ Group Office ‡∏à‡∏∞‡∏°‡∏µ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏î‡πÅ‡∏ä‡πà‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î" \
    "‡∏ã‡∏∂‡πà‡∏á‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏à‡∏≠‡∏î‡πÅ‡∏ä‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏Ø ‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à*")

st.plotly_chart(st.session_state["fig5_state"])
st.dataframe(nosql_result, hide_index=True)


